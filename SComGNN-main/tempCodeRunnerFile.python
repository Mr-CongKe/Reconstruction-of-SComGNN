import numpy as np
import matplotlib.pyplot as plt
import heapq

# A* Algorithm Implementation
class Node:
    def __init__(self, x, y, cost, parent):
        self.x = x
        self.y = y
        self.cost = cost
        self.parent = parent

    def __lt__(self, other):
        return self.cost < other.cost

def heuristic(a, b):
    return abs(a.x - b.x) + abs(a.y - b.y)

def astar(start, goal, grid):
    open_list = []
    closed_list = set()
    start_node = Node(start[0], start[1], 0, None)
    goal_node = Node(goal[0], goal[1], 0, None)
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add((current_node.x, current_node.y))
        
        if (current_node.x, current_node.y) == (goal_node.x, goal_node.y):
            path = []
            while current_node:
                path.append((current_node.x, current_node.y))
                current_node = current_node.parent
            return path[::-1]

        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0)]:
            node_position = (current_node.x + new_position[0], current_node.y + new_position[1])

            if node_position[0] > (len(grid) - 1) or node_position[0] < 0 or node_position[1] > (len(grid[len(grid)-1]) - 1) or node_position[1] < 0:
                continue
            
            if grid[node_position[0]][node_position[1]] != 0:
                continue
            
            if node_position in closed_list:
                continue

            new_node = Node(node_position[0], node_position[1], current_node.cost + 1, current_node)
            new_node.cost += heuristic(new_node, goal_node)

            heapq.heappush(open_list, new_node)

    return None

# Environment setup
start = (0, 0)
goal = (7, 7)
grid = np.zeros((10, 10))
obstacles = [(1, 1), (1, 2), (2, 2), (3, 4), (4, 4), (5, 4)]
for (ox, oy) in obstacles:
    grid[ox][oy] = 1

# Path planning
path = astar(start, goal, grid)
print("Path:", path)

import matplotlib.animation as animation

class PurePursuitController:
    def __init__(self, path, lookahead_distance):
        self.path = path
        self.lookahead_distance = lookahead_distance
        self.current_index = 0
    
    def find_target_point(self, position):
        while self.current_index < len(self.path):
            target = self.path[self.current_index]
            if np.linalg.norm(np.array(position) - np.array(target)) > self.lookahead_distance:
                return target
            self.current_index += 1
        return self.path[-1]

    def control(self, position):
        target = self.find_target_point(position)
        direction = np.arctan2(target[1] - position[1], target[0] - position[0])
        return direction

# Vehicle setup
position = [0, 0]
path_followed = [tuple(position)]
lookahead_distance = 1.0
controller = PurePursuitController(path, lookahead_distance)

fig, ax = plt.subplots()
ax.imshow(grid, cmap='gray')
path_x, path_y = zip(*path)
ax.plot(path_y, path_x, 'b', label='Planned Path')
line, = ax.plot([], [], 'r', label='Followed Path')

def init():
    line.set_data([], [])
    return line,

def animate(i):
    global position
    direction = controller.control(position)
    position[0] += np.cos(direction) * 0.5
    position[1] += np.sin(direction) * 0.5
    path_followed.append(tuple(position))
    
    followed_x, followed_y = zip(*path_followed)
    line.set_data(followed_y, followed_x)
    return line,

ani = animation.FuncAnimation(fig, animate, frames=100, init_func=init, interval=200, blit=True)
plt.legend()
plt.show()
